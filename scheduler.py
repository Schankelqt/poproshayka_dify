import schedule
import requests
import time
import logging
from dotenv import dotenv_values
from datetime import datetime
from users import TEAMS
from storage import load_answers_for

logging.basicConfig(level=logging.INFO, format='%(asctime)s %(levelname)s %(message)s')
logger = logging.getLogger("scheduler")

env = dotenv_values(".env")
TELEGRAM_TOKEN = env.get("TELEGRAM_TOKEN")

QUESTION_TEXT_WEEKDAY = (
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n"
    "1. –ß—Ç–æ –¥–µ–ª–∞–ª–∏ –≤—á–µ—Ä–∞?\n"
    "2. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?\n"
    "3. –ï—Å—Ç—å –ª–∏ –±–ª–æ–∫–µ—Ä—ã?"
)

QUESTION_TEXT_MONDAY = (
    "–î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! ‚òÄÔ∏è\n\n"
    "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ 3 –≤–æ–ø—Ä–æ—Å–∞:\n"
    "1. –ß—Ç–æ –¥–µ–ª–∞–ª–∏ –≤ –ø—è—Ç–Ω–∏—Ü—É?\n"
    "2. –ß—Ç–æ –ø–ª–∞–Ω–∏—Ä—É–µ—Ç–µ —Å–µ–≥–æ–¥–Ω—è?\n"
    "3. –ï—Å—Ç—å –ª–∏ –±–ª–æ–∫–µ—Ä—ã?"
)

def is_weekday() -> bool:
    return datetime.utcnow().weekday() < 5  # –ü–Ω=0 ... –í—Å=6 (–≤ UTC)

def send_questions():
    if not is_weekday():
        logger.info("–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –≤–æ–ø—Ä–æ—Å—ã –Ω–µ —Ä–∞—Å—Å—ã–ª–∞–µ–º")
        return

    qtext = QUESTION_TEXT_MONDAY if datetime.utcnow().weekday() == 0 else QUESTION_TEXT_WEEKDAY
    logger.info("üì§ –†–∞—Å—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º...")

    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"
    for team_id, team_data in TEAMS.items():
        for chat_id, name in team_data["members"].items():
            try:
                resp = requests.post(url, json={"chat_id": chat_id, "text": qtext}, timeout=30)
                if resp.ok:
                    logger.info(f"‚úÖ [{team_id}] –í–æ–ø—Ä–æ—Å ‚Üí {name} ({chat_id})")
                else:
                    logger.error(f"‚ùå [{team_id}] –û—à–∏–±–∫–∞ –≤–æ–ø—Ä–æ—Å–∞ {name} ({chat_id}): {resp.status_code} {resp.text}")
            except Exception as e:
                logger.error(f"‚ùå [{team_id}] –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ {name} ({chat_id}): {e}")
            time.sleep(1)  # –º—è–≥–∫–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞

def build_digest(answers: dict, team_members: dict) -> str:
    if not answers:
        return "‚ö†Ô∏è –ü–æ–∫–∞ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."

    lines = ["üìù –°—Ç–∞—Ç—É—Å—ã –Ω–∞ –æ—Ç—á—ë—Ç–Ω–æ–µ –≤—Ä–µ–º—è:\n"]
    total = len(team_members)
    responded = 0

    for chat_id, name in team_members.items():
        data = answers.get(str(chat_id))
        if data:
            lines.append(f"‚Äî {name}:\n{data.get('summary','')}\n")
            responded += 1
        else:
            lines.append(f"‚Äî {name}:\n- (–ø—Ä–æ—á–µ—Ä–∫)\n")

    lines.append(f"–û—Ç—á–∏—Ç–∞–ª–∏—Å—å: {responded}/{total}")
    return "\n".join(lines)

def send_summary(team_id: int):
    if not is_weekday():
        logger.info(f"–°–µ–≥–æ–¥–Ω—è –≤—ã—Ö–æ–¥–Ω–æ–π, –æ—Ç—á—ë—Ç—ã –∫–æ–º–∞–Ω–¥–µ {team_id} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º")
        return

    logger.info(f"üì§ –û—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç—á—ë—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞–º –∫–æ–º–∞–Ω–¥—ã {team_id}...")
    answers = load_answers_for()  # –∑–∞ —Å–µ–≥–æ–¥–Ω—è (UTC –¥–∞—Ç–∞)

    team_data = TEAMS[team_id]
    digest = build_digest(answers, team_data["members"])
    url = f"https://api.telegram.org/bot{TELEGRAM_TOKEN}/sendMessage"

    recipients = team_data.get("managers") or [team_data.get("manager")]
    for manager_id in recipients:
        try:
            resp = requests.post(url, json={"chat_id": manager_id, "text": digest}, timeout=30)
            if resp.ok:
                logger.info(f"‚úÖ –û—Ç—á—ë—Ç ‚Üí –º–µ–Ω–µ–¥–∂–µ—Ä {manager_id} (team {team_id})")
            else:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç—á—ë—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {resp.status_code} {resp.text}")
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç—á—ë—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä—É {manager_id}: {e}")

# –ü–ª–∞–Ω: –≤—Å—ë –≤ UTC. –ï—Å–ª–∏ –Ω—É–∂–µ–Ω —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å ‚Äî —Å–¥–≤–∏–≥–∞–π –≤—Ä–µ–º—è cron-–∞/—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ Render.
# –†–∞—Å—Å—ã–ª–∫–∞ –≤–æ–ø—Ä–æ—Å–æ–≤ –≤ 09:00 UTC (–ø—Ä–∏–º–µ—Ä)
for day in ("monday", "tuesday", "wednesday", "thursday", "friday"):
    getattr(schedule.every(), day).at("09:00").do(send_questions)

# –û—Ç—á—ë—Ç: –∫–æ–º–∞–Ω–¥–∞ 1 ‚Äî 09:30 UTC; –∫–æ–º–∞–Ω–¥–∞ 2 ‚Äî 11:00 UTC
for day in ("monday", "tuesday", "wednesday", "thursday", "friday"):
    getattr(schedule.every(), day).at("09:30").do(lambda: send_summary(1))
    getattr(schedule.every(), day).at("11:00").do(lambda: send_summary(2))

logger.info("üïí –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–ø—É—â–µ–Ω. –û–∂–∏–¥–∞–µ–º –∑–∞–¥–∞—á...")

while True:
    schedule.run_pending()
    time.sleep(30)